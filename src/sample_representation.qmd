# Sample Representation

## Integer

In summary, this book has no content whatsoever.

```{python}
#| echo: false
#| label: fig-foo
#| fig-cap: FooBar

import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

x = np.arange(10)
y = 2.5 * np.sin(x / 20 * np.pi)
yerr = np.linspace(0.05, 0.2, 10)

plt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')
plt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')
plt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,
             label='uplims=True, lolims=True')

upperlimits = [True, False] * 5
lowerlimits = [False, True] * 5
plt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,
             label='subsets of uplims and lolims')

plt.legend(loc='lower right')
plt.show(fig)
```


## Floating-Point

## Fixed-Point

```cpp
#include <cstdint>

constexpr int16_t Q = 1;
constexpr int16_t K = 1 << (Q - 1);

int16_t sat16(int32_t x)
{
	if (x > 0x7FFF) return 0x7FFF;
	else if (x < -0x8000) return -0x8000;
	else return (int16_t)x;
}

int16_t add(int16_t x, int16_t y) {
    return x + y;
}

int16_t sub(int16_t x, int16_t y) {
    return x - y;
}

int16_t mul(int16_t x, int16_t y) {
    int32_t tmp = (int32_t)(x) * (int32_t)(y);
    tmp += K;
    return sat16(tmp >> Q);
}
```
